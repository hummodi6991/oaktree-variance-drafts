workflow: single-file-chatgpt
inputs:
  file_flexible:
    type: file
    required: true
  local_only:
    type: boolean
    required: false
    default: false   # ChatGPT by default; set true to force local

actions:
  # Route: Local-only if explicitly requested, else ChatGPT
  - id: route_single
    type: branch
    branches:
      - when: "{{ inputs.local_only | default(false) }}"
        goto: single_local_path
      - else:
        goto: run-track-b-chatgpt-variance-or-summary

  # --- LOCAL path (mirrors current behavior) ---
  - id: single_local_path
    type: workflow
    steps:
      - id: local_parse
        type: local_extract
        file: "{{ inputs.file_flexible }}"
      - id: local_analyze
        type: local_analyze
        inputs:
          text: "{{ steps.local_parse.outputs.text }}"
      - id: deliver_local
        type: result
        outputs:
          report_markdown: "{{ steps.local_analyze.outputs.text }}"
          model_family: "local"

  # --- CHATGPT path for Single-file track ---
  - id: run-track-b-chatgpt-variance-or-summary
    type: workflow
    steps:
      - id: b_inspect
        type: file_inspect
        file: "{{ inputs.file_flexible }}"

      - id: b_extract
        type: llm_extract
        model: "{{ env.OPENAI_MODEL_EXTRACT | default('gpt-4o') }}"
        timeout_sec: 90
        retry: { max: 2, backoff_sec: 2 }
        files: ["{{ inputs.file_flexible }}"]
        prompt: |
          ROLE: Finance data wrangler.
          INPUT: One file (PDF/Word/CSV/Excel/Text/JSON). May be incomplete or messy.
          TASK:
            1) Parse ONLY what exists in the file (no invention).
            2) Produce a normalized CSV with tolerant headers:
               ["period","cost_center","account","metric","budget","actual","amount","currency","source","notes"]
               - If the file separates budget/actuals, map to "budget" and "actual".
               - If it has one value column, map to "amount" and a best-available "metric" from the file.
            3) Return:
               - normalized_csv  (UTF-8 CSV string, evidence-only)
               - notes           (assumptions, gaps, citations such as page/sheet/column)
          HARD RULES:
            - No hallucinations. Leave unknowns blank and explain in notes.

      - id: b_route_ba
        type: branch
        branches:
          - when: >-
              {{
                (steps.b_extract.outputs.normalized_csv | lower) is string
                and
                (
                  'budget' in (steps.b_extract.outputs.normalized_csv | lower)
                  or 'planned' in (steps.b_extract.outputs.normalized_csv | lower)
                  or 'plan' in (steps.b_extract.outputs.normalized_csv | lower)
                )
                and
                (
                  'actual' in (steps.b_extract.outputs.normalized_csv | lower)
                  or 'actuals' in (steps.b_extract.outputs.normalized_csv | lower)
                  or 'spent' in (steps.b_extract.outputs.normalized_csv | lower)
                  or 'spend' in (steps.b_extract.outputs.normalized_csv | lower)
                  or 'ctd' in (steps.b_extract.outputs.normalized_csv | lower)
                )
              }}
            goto: b_variance_analyze
          - else:
            goto: b_summary_analyze

      - id: b_variance_analyze
        type: llm_analyze
        model: "{{ env.OPENAI_MODEL_ANALYZE | default('gpt-4o') }}"
        timeout_sec: 90
        retry: { max: 2, backoff_sec: 2 }
        inputs:
          csv:   "{{ steps.b_extract.outputs.normalized_csv }}"
          notes: "{{ steps.b_extract.outputs.notes }}"
        prompt: |
          ROLE: Variance analyst & auditor.
          INPUTS:
            - normalized CSV (budget/actuals present)
            - notes (assumptions & data-quality)
          TASK:
            1) Build a Variance table ONLY for rows where both budget and actual exist:
               columns = [period?, cost_center?, account?, metric?, budget, actual, variance, variance_pct]
               - variance = actual - budget
               - variance_pct = variance / budget   (blank if budget == 0 or null)
            2) Provide an "Executive Summary" in markdown with:
               - Top 5 positive/negative variances (by absolute value)
               - Material drivers (accounts/categories) with brief bullets
               - Trends by period if periods exist
            3) Provide "Data Quality & Assumptions" with line/sheet/page refs.
          OUTPUTS:
            - text            (markdown report)
            - variance_table  (machine-readable table)
          HARD RULES:
            - Evidence-only. No invented figures.

      - id: b_summary_analyze
        type: llm_analyze
        model: "{{ env.OPENAI_MODEL_ANALYZE | default('gpt-4o') }}"
        timeout_sec: 90
        retry: { max: 2, backoff_sec: 2 }
        inputs:
          csv:   "{{ steps.b_extract.outputs.normalized_csv }}"
          notes: "{{ steps.b_extract.outputs.notes }}"
        prompt: |
          ROLE: Finance analyst.
          Using ONLY the CSV/notes:
            - Return three sections in markdown:
              (1) Financial Summary — totals by period/account/cost_center if present.
              (2) Financial Analysis — top spends, MoM deltas, notable patterns/outliers.
              (3) Financial Insights — actionable bullets; call out gaps and data-quality issues.
          HARD RULES:
            - No invention. Do not fabricate budgets/forecasts if absent.

      - id: deliver_single
        type: result
        outputs:
          report_markdown: >-
            {{
              steps.b_variance_analyze.outputs.text
              if steps.b_variance_analyze.outputs.text is present
              else steps.b_summary_analyze.outputs.text
            }}
          normalized_csv: "{{ steps.b_extract.outputs.normalized_csv }}"
          data_notes:     "{{ steps.b_extract.outputs.notes }}"
          variance_table: "{{ steps.b_variance_analyze.outputs.variance_table }}"
          model_family:   "chatgpt"
