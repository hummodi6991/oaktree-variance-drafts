name: deploy
on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    env:
      AZURE_WEBAPP_NAME: oaktree-variance-dev
      AZURE_RESOURCE_GROUP: oaktree-variance-dev-rg

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # 1) Detect backend folder (tries common names, then falls back to repo root)
      - name: Detect backend directory
        id: detect
        shell: bash
        run: |
          set -euo pipefail
          CANDS=("backend" "server" "api" "app" ".")
          PICK=""
          for d in "${CANDS[@]}"; do
            if [ -e "$d/requirements.txt" ] || [ -e "$d/pyproject.toml" ]; then
              PICK="$d"
              break
            fi
          done
          if [ -z "$PICK" ]; then
            # last-chance: if src/ has python files, use repo root anyway
            PICK="."
          fi
          echo "APP_DIR=$PICK" | tee -a "$GITHUB_ENV"
          echo "Using APP_DIR='$PICK'"

      - name: Show APP_DIR contents (non-fatal)
        shell: bash
        run: |
          set +e
          echo "APP_DIR: $APP_DIR"
          ls -la "$APP_DIR" || true

      # 2) (Optional) validate we have a Python app
      - name: Validate backend layout
        shell: bash
        run: |
          test -e "$APP_DIR/requirements.txt" -o -e "$APP_DIR/pyproject.toml" || {
            echo "::error::No requirements.txt or pyproject.toml found in $APP_DIR"; exit 1; }

      # 3) Build the artifact (zip root = backend dir)
      - name: Build deployable artifact
        shell: bash
        run: |
          cd "$APP_DIR"
          pipx install build >/dev/null 2>&1 || true
          # Create a clean zip, excluding junk
          if [ "$APP_DIR" = "." ]; then
            ZIP_PATH="app.zip"
          else
            ZIP_PATH="../app.zip"
          fi
          zip -qry "$ZIP_PATH" . \
            -x "./.git/*" "./.github/*" "./app.zip" "**/__pycache__/*" "*.pyc" ".venv/*" "venv/*" "node_modules/*"
          cd -
          ls -lh app.zip

      # 4) Azure login with OIDC
      - name: Azure OIDC login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Who am I in Azure?
        shell: bash
        run: |
          set -euo pipefail
          echo "== Account =="
          az account show --query "{name:name,id:id,tenantId:tenantId}" -o table
          echo "== Service principal behind AZURE_CLIENT_ID =="
          az ad sp show --id "${{ secrets.AZURE_CLIENT_ID }}" \
            --query "{displayName:displayName,appId:appId,objectId:id}" -o table

      - name: Validate Azure inputs
        shell: bash
        run: |
          set -euo pipefail
          for v in AZURE_WEBAPP_NAME AZURE_RESOURCE_GROUP; do
            if [ -z "${!v:-}" ]; then
              echo "::error::Missing $v"; exit 1
            fi
          done
          echo "Using RG=$AZURE_RESOURCE_GROUP, APP=$AZURE_WEBAPP_NAME"
          az group show -n "$AZURE_RESOURCE_GROUP" -o table

      # 5) Make sure Deployment Center is detached & Oryx rebuild is off (idempotent)
      - name: Prepare Web App for zip deploy
        shell: bash
        run: |
          az webapp deployment source delete \
            --name "$AZURE_WEBAPP_NAME" \
            --resource-group "$AZURE_RESOURCE_GROUP" || true
          az webapp config appsettings set \
            --name "$AZURE_WEBAPP_NAME" \
            --resource-group "$AZURE_RESOURCE_GROUP" \
            --settings SCM_DO_BUILD_DURING_DEPLOYMENT=false

      # 6) Zip deploy with a safe retry (handles 409 lock)
      - name: Zip deploy attempt 1
        id: deploy1
        uses: azure/webapps-deploy@v3
        continue-on-error: true
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          package: app.zip

      - name: Retry if first deploy failed
        if: steps.deploy1.outcome == 'failure'
        run: sleep 20

      - name: Zip deploy attempt 2
        if: steps.deploy1.outcome == 'failure'
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          package: app.zip
